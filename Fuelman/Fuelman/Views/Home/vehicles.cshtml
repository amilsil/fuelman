@model Fuelman.Models.Vehicle

@{
    ViewBag.Title = "vehicles";
}

<h2>Your Vehicles</h2>
<div id="vehicles-list">
    <ul data-bind="foreach: vehicles">
        <li data-bind="click: $root.vehicleClick">
            <h2 data-bind="text: $data.Name"></h2>
        
            <div class="brand-name" data-bind="text: $data.BrandName"></div>
            <div class="model-name" data-bind="text: $data.ModelName"></div>

            <div class="buttons">
                <input type="button" value="Update" data-bind="click: $root.update" />
                <input type="button" value="Delete" data-bind="click: $root.remove" />
            </div>

        
        </li>

    </ul>
    <div class="refills">
        <ul data-bind="foreach: refills">
            <li>
                <table>
                    <tr>
                        <td data-bind="text: $data.RefillDate"></td>
                        <td data-bind="text: $data.Odometer"></td>
                        <td data-bind="text: $data.RefillAmount"></td>
                        <td data-bind="text: $data.IsFullTank"></td>
                    </tr>
                </table>
            </li>
        </ul>
    </div>
</div>
<div>
    <h2>Create New One</h2>
    <div class="active-form">
        <form id="addVehicle" data-bind="submit: create">
            @Html.ValidationSummary(true)
            <fieldset>
                <legend>Vehicle</legend>
                <div class="editor-label">
                    @Html.LabelFor(model => model.Name)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.Name)
                    @Html.ValidationMessageFor(model => model.Name)
                </div>

                <div class="editor-label">
                    @Html.LabelFor(model => model.BrandId)
                </div>
                <div class="editor-field">
                    <select
                        data-bind="foreach: brands, value: selectedBrand"
                        data-val="true" 
                        data-val-number="The field BrandId must be a number." 
                        data-val-required="The BrandId field is required." 
                        id="BrandId" name="BrandId">
                        <option data-bind="text: BrandName, value: Id"></option>
                    
                    </select>
                    @Html.ValidationMessageFor(model => model.BrandId)
                </div>
            
                <div class="editor-label">
                    @Html.LabelFor(model => model.ModelId)
                </div>
                <div class="editor-field">
                     <select
                        data-bind="foreach: models, value: selectedModel"
                        data-val="true" 
                        data-val-number="The field BrandId must be a number." 
                        data-val-required="The BrandId field is required." 
                        id="ModelId" name="ModelId">
                        <option data-bind="text: ModelName, value: Id"></option>
                    </select>
                    @Html.ValidationMessageFor(model => model.ModelId)
                </div>

                <div class="editor-label">
                    @Html.LabelFor(model => model.RefillUnitId)
                </div>
                <div class="editor-field">
                    <select
                        data-bind="foreach: refillUnits"
                        data-val="true" 
                        data-val-number="The field BrandId must be a number." 
                        data-val-required="The BrandId field is required." 
                        id="RefillUnitId" name="RefillUnitId">
                        <option data-bind="text: Description, value: Id"></option>
                    </select>
                    @Html.ValidationMessageFor(model => model.RefillUnitId)
                </div>
                <p>
                    <input type="submit" value="Save" />
                </p>
            </fieldset>
        </form>
    </div>
</div>

@section Scripts {
  @Scripts.Render("~/bundles/jqueryval")
  <script type="text/javascript" src="@Url.Content("~/Scripts/knockout-2.2.0.js")"></script> 
  <script type="text/javascript">
    
      function VehiclesViewModel() {
          var self = this;
          self.brands = ko.observableArray();
          self.models = ko.observableArray();
          self.refills = ko.observableArray();
          self.refillUnits = ko.observableArray();
          self.vehicles = ko.observableArray();

          self.selectedBrand = ko.observable();
          self.selectedModel = ko.observable();

          self.baseUri = '@ViewBag.ApiUrl';

          self.vehicleApi = function () { return self.baseUri + "/vehicle"; };
          self.brandApi = function () { return self.baseUri + "/brand"; };
          self.modelsApi = function () { return self.baseUri + "/model"; };
          self.refillUnitApi = function () { return self.baseUri + "/refillunit"; };
          self.refillApi = function () { return self.baseUri + "/refill"; };

          self.computedModels = ko.computed(function () {
              if (self.selectedBrand() == undefined)
                  self.selectedBrand(1);

              $.getJSON(self.modelsApi() + "?brand=" + self.selectedBrand(), self.models);
              return self.models;
          });

          self.create = function (formElement) {
              // If the form data is valid, post the serialized form data to the web API.
              $(formElement).validate();

              if ($(formElement).valid()) {
                  $.post(self.vehicleApi() , $(formElement).serialize(), null, "json")
                      .done(function (o) {
                          // Add the new product to the view-model.
                          self.vehicles.push(o);
                      });
              }
          }

          self.update = function (vehicle) {
              $.ajax({ type: "PUT", url: self.vehicleApi() + '/' + vehicle.Id, data: vehicle });
          }

          self.remove = function (vehicle) {
              // First remove from the server, then from the view-model.
              $.ajax({ type: "DELETE", url: self.vehicleApi()  + '/' + vehicle.Id })
                  .done(function () { self.vehicles.remove(vehicle); });
          }

          self.vehicleClick = function (vehicle) {
              $.getJSON(self.refillApi() + "?vehicleId=" + vehicle.Id, self.refills);
          }

          $.getJSON(self.vehicleApi(), self.vehicles);
          $.getJSON(self.brandApi(), self.brands);
          $.getJSON(self.refillUnitApi(), self.refillUnits);
      }

      $(document).ready(function () {
          ko.applyBindings(new VehiclesViewModel());
      });
  </script>
}
