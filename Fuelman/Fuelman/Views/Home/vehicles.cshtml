@model Fuelman.Models.Vehicle

@{
    ViewBag.Title = "vehicles";
}

<h2>Your Vehicles</h2>
<div id="tile_list">
    <select data-bind="options: vehicles,
    optionsText: 'Name',
    value: selectedVehicle"></select>
    
    <span>
        <button data-bind="click: function () { isCreateNewVehicle(true); }">New!</button>
    </span>
    
    <!-- vehicle-overview -->
    <div class="vehicle-overview" data-bind="if: selectedVehicle, visible: selectedVehicle">
        <div class="tile-title">
            <span class="brand" data-bind="text: selectedVehicle().Name"></span>
            (<span class="brand" data-bind="text: selectedVehicle().BrandName"></span>
            <span class="model" data-bind="text: selectedVehicle().ModelName"></span>)
        </div>
        <div>

        </div>
    </div> <!-- vehicle-overview -->

    <!--new vehicle-form-->
    <div class="vehicle-form" data-bind="visible: isCreateNewVehicle">
        <div class="tile-title">Create New One</div>
        <div>
            <form id="addVehicle" data-bind="submit: create">
                @Html.ValidationSummary(true)
                <fieldset>
                    <legend>Vehicle</legend>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.Name)
                    </div>
                    <div class="editor-field">
                        @Html.EditorFor(model => model.Name)
                        @Html.ValidationMessageFor(model => model.Name)
                    </div>

                    <div class="editor-label">
                        @Html.LabelFor(model => model.BrandId)
                    </div>
                    <div class="editor-field">
                        <select
                            data-bind="foreach: brands, value: selectedBrand"
                            data-val="true" 
                            data-val-number="The field BrandId must be a number." 
                            data-val-required="The BrandId field is required." 
                            id="BrandId" name="BrandId">
                            <option data-bind="text: BrandName, value: Id"></option>
                    
                        </select>
                        @Html.ValidationMessageFor(model => model.BrandId)
                    </div>
            
                    <div class="editor-label">
                        @Html.LabelFor(model => model.ModelId)
                    </div>
                    <div class="editor-field">
                         <select
                            data-bind="foreach: models, value: selectedModel"
                            data-val="true" 
                            data-val-number="The field BrandId must be a number." 
                            data-val-required="The BrandId field is required." 
                            id="ModelId" name="ModelId">
                            <option data-bind="text: ModelName, value: Id"></option>
                        </select>
                        @Html.ValidationMessageFor(model => model.ModelId)
                    </div>

                    <div class="editor-label">
                        @Html.LabelFor(model => model.RefillUnitId)
                    </div>
                    <div class="editor-field">
                        <select
                            data-bind="foreach: refillUnits"
                            data-val="true" 
                            data-val-number="The field BrandId must be a number." 
                            data-val-required="The BrandId field is required." 
                            id="RefillUnitId" name="RefillUnitId">
                            <option data-bind="text: Description, value: Id"></option>
                        </select>
                        @Html.ValidationMessageFor(model => model.RefillUnitId)
                    </div>
                    <p>
                        <input type="submit" value="Save" />
                        <input type="button" value="Cancel" data-bind="click: function () { isCreateNewVehicle(false); }" />
                    </p>
                </fieldset>
            </form>
        </div>
    </div> <!--new vehicle-form-->

    <!-- statistics -->
    <div class="statistics">
        <div class="tile-title"> Statistics </div>
        <div data-bind="visible: statisticsVisible()">
            <table>
                <thead>
                    <tr>
                        <th>Fuel</th>
                        <th>Distance</th>
                        <th>Economy</th>                    
                    </tr>
                </thead>
                <tbody data-bind="foreach: statistics()">
                    <tr>
                        <td data-bind="text: $data.Fuel"></td>
                        <td data-bind="text: $data.Distance"></td>
                        <td data-bind="text: $data.Economy"></td>
                    </tr>                
                </tbody>
            </table>

            <div id="chart_container">
                <canvas id="chart_canvas"></canvas>
            </div>
        </div>
        <div data-bind="visible: !statisticsVisible()">
            <span class="info">More refill records you add, the prettier the statistics get. Don't overkill though. :)</span>
        </div>
    </div> <!-- statistics -->

    <!-- refills -->
    <div class="refills">
        <div class="tile-title">Refill History</div>
        <div data-bind="visible: refills().length > 0">
            <table>
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Odometer</th>
                        <th>Refill Amount()</th>
                        <th>Full Tank or Not</th>
                    </tr>
                </thead>
                <tbody data-bind="foreach: refills()">
                    <tr>
                        <td data-bind="text: $data.RefillDate"></td>
                        <td data-bind="text: $data.Odometer"></td>
                        <td data-bind="text: $data.RefillAmount"></td>
                        <td data-bind="text: $data.IsFullTank"></td>
                    </tr>                
                </tbody>
            </table>
        </div>
        <div data-bind="visible: refills().length < 1">
            <span class="info">You haven't added a refill yet. <br /> Add one now. :) </span>
        </div>
        <button data-bind="click: function () { isCreateNewRefill(true); }">New Refill!</button>
    </div> <!-- refills -->

    <!-- refill-form -->
    <div class="refill-form" data-bind="visible: isCreateNewRefill()"> 
        <div class="tile-title">New Refill</div>
        <form id="refill_form">
            <fieldset>
                <legend>New Refill</legend>
                <div class="editor-label"> Date </div>
                <input type="text" data-val="true" 
                        data-val-date="The field Date must be a Date." 
                        data-val-required="The Date field is required." />

                <div class="editor-label"> Odometer Reading </div>
                <input type="text" data-val="true" 
                        data-val-number="The field Odometer Reading must be a number." 
                        data-val-required="The Odometer Reading field is required." />

                <div class="editor-label"> Refill Amount </div>
                <input type="text" data-val="true" 
                        data-val-number="The field Refill Amount must be a number." 
                        data-val-required="The Refill Amount field is required." />

                <div class="editor-label"> Full tank </div>
                <select>
                    <option value="1">Yes</option>
                    <option value="0">No</option>
                </select>
            </fieldset>
            
            <p>
                <input type="submit" value="Save" />
                <input type="button" value="Cancel" data-bind="click: function () { isCreateNewRefill(false); }" />
            </p>
        </form> 
    </div> <!-- refill_form -->
</div>


@section Scripts {
  @Scripts.Render("~/bundles/jqueryval")
  <script type="text/javascript" src="@Url.Content("~/Scripts/knockout-2.2.0.js")"></script> 
  <script type="text/javascript" src="@Url.Content("~/Scripts/Chart.js")"></script> 
  <script type="text/javascript">
    
      var getKeys = function (obj) {
          var keys = [];
          for (var key in obj) {
              keys.push(key);
              keys.push(obj[key]);
          }
          return keys;
      };

      function VehiclesViewModel() {
          var self = this;

          self.brands = ko.observableArray();
          self.models = ko.observableArray();
          self.refills = ko.observableArray();
          self.refillUnits = ko.observableArray();
          self.vehicles = ko.observableArray();
          self.statistics = ko.observableArray(); // vehicle statistics

          self.selectedVehicle = ko.observable(); // selected vehicle.
          self.selectedBrand = ko.observable();
          self.selectedModel = ko.observable();
          
          self.isCreateNewVehicle = ko.observable(false);
          self.isCreateNewRefill = ko.observable(false);

          self.baseUri = '@ViewBag.ApiUrl';

          self.vehicleApi = function () { return self.baseUri + "/vehicle"; };
          self.brandApi = function () { return self.baseUri + "/brand"; };
          self.modelsApi = function () { return self.baseUri + "/model"; };
          self.refillUnitApi = function () { return self.baseUri + "/refillunit"; };
          self.refillApi = function () { return self.baseUri + "/refill"; };
          self.statApi = function () { return self.baseUri + "/stat"; };

          self.statisticsVisible = ko.computed(function() {
              if (self.statistics() != undefined) {
                  return self.statistics().length > 0;
              }
              return false;
          });

          self.computedModels = ko.computed(function () {
              if (self.selectedBrand() == undefined)
                  self.selectedBrand(1);

              $.getJSON(self.modelsApi() + "?brand=" + self.selectedBrand(), self.models);
              return self.models;
          });

          self.create = function (formElement) {
              // If the form data is valid, post the serialized form data to the web API.
              $(formElement).validate();

              if ($(formElement).valid()) {
                  $.post(self.vehicleApi() , $(formElement).serialize(), null, "json")
                      .done(function (o) {
                          // Add the new product to the view-model.
                          self.vehicles.push(o);
                      });
              }
          }

          self.update = function (vehicle) {
              $.ajax({ type: "PUT", url: self.vehicleApi() + '/' + vehicle.Id, data: vehicle });
          }

          self.remove = function (vehicle) {
              // First remove from the server, then from the view-model.
              $.ajax({ type: "DELETE", url: self.vehicleApi()  + '/' + vehicle.Id })
                  .done(function () { self.vehicles.remove(vehicle); });
          }

          self.onVehicleChange = ko.computed(function () {
              if (self.selectedVehicle() != undefined) {
                  $.getJSON(self.statApi() + "/" + self.selectedVehicle().Id, self.statistics);
                  $.getJSON(self.refillApi() + "?vehicleId=" + self.selectedVehicle().Id, self.refills);

                  // Draw the chart.
                  var ctx = document.getElementById("chart_canvas").getContext("2d");

                  ctx.canvas.width = $("#tile_list").innerWidth() - 100;
                  ctx.canvas.height = 300;
                  window.myLine = new Chart(ctx).Line(lineChartData, {
                      responsive: false
                  });
              }

              return self.statistics;
          });

          $.getJSON(self.vehicleApi(), self.vehicles);
          $.getJSON(self.brandApi(), self.brands);
          $.getJSON(self.refillUnitApi(), self.refillUnits);
      }

      // Chart stuff
      var randomScalingFactor = function () { return Math.round(Math.random() * 100) };
      var lineChartData = {
          labels: ["January", "February", "March", "April", "May", "June", "July"],
          datasets: [
              {
                  label: "My First dataset",
                  fillColor: "rgba(220,220,220,0.2)",
                  strokeColor: "rgba(220,220,220,1)",
                  pointColor: "rgba(220,220,220,1)",
                  pointStrokeColor: "#fff",
                  pointHighlightFill: "#fff",
                  pointHighlightStroke: "rgba(220,220,220,1)",
                  data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()]
              },
              {
                  label: "My Second dataset",
                  fillColor: "rgba(151,187,205,0.2)",
                  strokeColor: "rgba(151,187,205,1)",
                  pointColor: "rgba(151,187,205,1)",
                  pointStrokeColor: "#fff",
                  pointHighlightFill: "#fff",
                  pointHighlightStroke: "rgba(151,187,205,1)",
                  data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()]
              }
          ]
      }

      $(document).ready(function () {
          ko.applyBindings(new VehiclesViewModel());
      });
  </script>
}
