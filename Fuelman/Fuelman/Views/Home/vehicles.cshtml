@model Fuelman.Models.Vehicle

@{
    ViewBag.Title = "vehicles";
}

<h2>vehicles</h2>

<ul id="update-vehicles" data-bind="foreach: vehicles">
    <li>
        <div>
            <div>Name</div>
            <input type="text" data-bind="value: $data.Name" />
        </div>

        <div data-bind="text: $data.BrandName"></div>
        <div data-bind="text: $data.ModelName"></div>

        <div>
            <input type="button" value="Update" data-bind="click: $root.update" />
            <input type="button" value="Delete" data-bind="click: $root.remove" />
        </div>
    </li>
</ul>

<div>
    <h2>Add New Vehicle</h2>
    <form id="addVehicle" data-bind="submit: create">
        @Html.ValidationSummary(true)
        <fieldset>
            <legend>Vehicle</legend>
            <div class="editor-label">
                @Html.LabelFor(model => model.Name)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Name)
                @Html.ValidationMessageFor(model => model.Name)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.BrandId)
            </div>
            <div class="editor-field">
                <select
                    data-bind="foreach: brands, value: selectedBrand"
                    data-val="true" 
                    data-val-number="The field BrandId must be a number." 
                    data-val-required="The BrandId field is required." 
                    id="BrandId" name="BrandId">
                    <option data-bind="text: BrandName, value: Id"></option>
                    
                </select>
                @Html.ValidationMessageFor(model => model.BrandId)
            </div>
            
            <div class="editor-label">
                @Html.LabelFor(model => model.ModelId)
            </div>
            <div class="editor-field">
                 <select
                    data-bind="foreach: models, value: selectedModel"
                    data-val="true" 
                    data-val-number="The field BrandId must be a number." 
                    data-val-required="The BrandId field is required." 
                    id="ModelId" name="ModelId">
                    <option data-bind="text: ModelName, value: Id"></option>
                </select>
                @Html.ValidationMessageFor(model => model.ModelId)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.RefillUnitId)
            </div>
            <div class="editor-field">
                <select
                    data-bind="foreach: refillUnits"
                    data-val="true" 
                    data-val-number="The field BrandId must be a number." 
                    data-val-required="The BrandId field is required." 
                    id="RefillUnitId" name="RefillUnitId">
                    <option data-bind="text: Description, value: Id"></option>
                </select>
                @Html.ValidationMessageFor(model => model.RefillUnitId)
            </div>
            <p>
                <input type="submit" value="Save" />
            </p>
        </fieldset>
    </form>
</div>

@section Scripts {
  @Scripts.Render("~/bundles/jqueryval")
  <script type="text/javascript" src="@Url.Content("~/Scripts/knockout-2.2.0.js")"></script> 
  <script type="text/javascript">
    
      function VehiclesViewModel() {
          var self = this;
          self.brands = ko.observableArray();
          self.models = ko.observableArray();
          self.refillUnits = ko.observableArray();
          self.selectedBrand = ko.observable();
          self.selectedModel = ko.observable();
          self.vehicles = ko.observableArray();

          self.baseUri = '@ViewBag.ApiUrl';

          self.vehicleApi = function () { return self.baseUri + "/vehicle"; };
          self.brandApi = function () { return self.baseUri + "/brand"; };
          self.modelsApi = function () { return self.baseUri + "/model"; };
          self.refillUnitApi = function () { return self.baseUri + "/refillunit"; };

          self.computedModels = ko.computed(function () {
              if (self.selectedBrand() == undefined)
                  self.selectedBrand(1);

              $.getJSON(self.modelsApi() + "?brand=" + self.selectedBrand(), self.models);
              return self.models;
          });

          self.create = function (formElement) {
              // If the form data is valid, post the serialized form data to the web API.
              $(formElement).validate();

              if ($(formElement).valid()) {
                  $.post(self.vehicleApi() , $(formElement).serialize(), null, "json")
                      .done(function (o) {
                          // Add the new product to the view-model.
                          self.vehicles.push(o);
                      });
              }
          }

          self.update = function (vehicle) {
              $.ajax({ type: "PUT", url: self.vehicleApi() + '/' + vehicle.Id, data: vehicle });
          }

          self.remove = function (vehicle) {
              // First remove from the server, then from the view-model.
              $.ajax({ type: "DELETE", url: self.vehicleApi()  + '/' + vehicle.Id })
                  .done(function () { self.vehicles.remove(vehicle); });
          }

          $.getJSON(self.vehicleApi(), self.vehicles);
          $.getJSON(self.brandApi(), self.brands);
          $.getJSON(self.refillUnitApi(), self.refillUnits);
      }

      $(document).ready(function () {
          ko.applyBindings(new VehiclesViewModel());
      });
  </script>
}
